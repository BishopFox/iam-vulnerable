data "aws_iam_policy_document" "fp5-NonExploitableConditionConstraint" {

  statement {

    actions = [
      "iam:CreatePolicyVersion",
    ]

    effect = "Allow"

    resources = [
      "*",
    ]

    condition {
      test     = "DateLessThan"
      variable = "aws:TokenIssueTime"
      values = [
        "2020-01-01T00:00:01Z"
      ]
    }
  }
}





resource "aws_iam_policy" "fp5-nonExploitableConditionConstraint" {
  name        = "fp5-nonExploitableConditionConstraint"
  path        = "/"
  description = "Allows privesc via iam:CreatePolicyVersion"
  policy = data.aws_iam_policy_document.fp5-NonExploitableConditionConstraint.json
}

resource "aws_iam_role" "fp5-nonExploitableConditionConstraint-role" {
  name                = "fp5-nonExploitableConditionConstraint-role"
  assume_role_policy  = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          AWS = var.aws_assume_role_arn
        }
      },
    ]
  })
}


resource "aws_iam_user" "fp5-nonExploitableConditionConstraint-user" {
  name = "fp5-nonExploitableConditionConstraint-user"
  path = "/"
}

resource "aws_iam_access_key" "fp5-nonExploitableConditionConstraint-user" {
 user = aws_iam_user.fp5-nonExploitableConditionConstraint-user.name
}


resource "aws_iam_user_policy_attachment" "fp5-nonExploitableConditionConstraint-user-attach-policy" {
  user       = aws_iam_user.fp5-nonExploitableConditionConstraint-user.name
  policy_arn = aws_iam_policy.fp5-nonExploitableConditionConstraint.arn
}

resource "aws_iam_role_policy_attachment" "fp5-nonExploitableConditionConstraint-role-attach-policy" {
  role       = aws_iam_role.fp5-nonExploitableConditionConstraint-role.name
  policy_arn = aws_iam_policy.fp5-nonExploitableConditionConstraint.arn

}  